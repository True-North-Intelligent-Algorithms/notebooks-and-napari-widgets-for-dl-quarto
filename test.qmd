---
title: "Notebooks and Widgets for Deep Learning"
format:
  revealjs:
          theme: default
          slide-number: true
          footer: Northeast Bioimage Analysis Meeting
          transition: "slide"
          highlight-style: arrow
          chalkboard: 
              buttons: false
          controls-layout: bottom-right
  html:
    code-fold: true
jupyter: python3
---

## Notebooks and Widgets for Deep Learning

## Notebooks

* Notebook are fun

## Widgets

* Widgets are too

```{python}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

## Start

```{python}
from skimage.io import imread
import os 
import napari
import matplotlib.pyplot as plt
import numpy as np
data_path = r'../notebooks-and-napari-widgets-for-dl/data'
parent_path = os.path.join(data_path, 'ladybugs_series')
img = imread(os.path.join(parent_path, '26638467_41374651.jpg'))
plt.imshow(img)


```

## Napari is fun 

```{python}
viewer = napari.Viewer()
viewer.add_image(img)
labels = np.zeros([img.shape[0], img.shape[1]], dtype=np.uint16)
viewer.add_labels(labels, name='labels')
results = np.zeros([img.shape[0], img.shape[1]], dtype=np.uint16)
viewer.add_labels(results, name='cyto3 masks')
viewer.add_shapes(face_color='transparent', edge_width=5, edge_color='blue', name='rois')

from cellpose import models, io
model_cyto3 = models.CellposeModel(gpu=True, model_type="cyto3")
results = model_cyto3.eval(img, diameter=140)
viewer.layers['cyto3 masks'].data = results[0]

screenshot = viewer.screenshot(r'./napari_screenshot.png', canvas_only=False)

plt.imshow(screenshot)
viewer.close()

```


## Dynamic

* dynamic is pretty fun 


```{python}
import numpy as np
import plotly.graph_objects as go

# Parameters
group1_mean_intensity = 10
group2_mean_intensity = 4
radius_mean = 5
std_radius = 2.5
std_intensity_group1 = 1
std_intensity_group2 = 1
size = 100  # Number of points in each group

# Generate data for Group 1
np.random.seed(1)
radii1 = np.random.normal(radius_mean, std_radius, size)
intensity1 = np.random.normal(group1_mean_intensity, std_intensity_group1, size)

# Generate data for Group 2
radii2 = np.random.normal(radius_mean, std_radius, size)
intensity2 = np.random.normal(group2_mean_intensity, std_intensity_group2, size)

# Create scatter plot
fig = go.Figure()

# Add group 1 points
fig.add_trace(go.Scatter(
    x=radii1, y=intensity1,
    mode='markers',
    name='Group 1',
    marker=dict(color='blue', size=7, opacity=0.6)
))

# Add group 2 points
fig.add_trace(go.Scatter(
    x=radii2, y=intensity2,
    mode='markers',
    name='Group 2',
    marker=dict(color='red', size=7, opacity=0.6)
))

# Initial threshold line
initial_threshold = 6

# Add a draggable vertical line as threshold
fig.add_shape(
    type="line",
    x0=initial_threshold, y0=0,
    x1=initial_threshold, y1=12,
    line=dict(color="green", width=2, dash="dash"),
    name="Threshold",
)

# Add an annotation to label the threshold line
fig.add_annotation(
    x=initial_threshold, y=11,
    text="Drag to Adjust Threshold",
    showarrow=True,
    arrowhead=2
)

# Layout settings
fig.update_layout(
    title="Interactive Scatter Plot with Adjustable Threshold",
    xaxis_title="Radius",
    yaxis_title="Intensity",
    shapes=[dict(type='line', xref='x', yref='paper', x0=initial_threshold, x1=initial_threshold, y0=0, y1=1, line_width=2)]
)

fig.show()
```

##